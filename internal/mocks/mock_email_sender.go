// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/email/email.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailSenderService is a mock of EmailSenderService interface.
type MockEmailSenderService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderServiceMockRecorder
}

// MockEmailSenderServiceMockRecorder is the mock recorder for MockEmailSenderService.
type MockEmailSenderServiceMockRecorder struct {
	mock *MockEmailSenderService
}

// NewMockEmailSenderService creates a new mock instance.
func NewMockEmailSenderService(ctrl *gomock.Controller) *MockEmailSenderService {
	mock := &MockEmailSenderService{ctrl: ctrl}
	mock.recorder = &MockEmailSenderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSenderService) EXPECT() *MockEmailSenderServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSenderService) SendEmail(to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderServiceMockRecorder) SendEmail(to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSenderService)(nil).SendEmail), to, subject, body)
}

// SendResetPasswordEmail mocks base method.
func (m *MockEmailSenderService) SendResetPasswordEmail(to, name, resetCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordEmail", to, name, resetCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordEmail indicates an expected call of SendResetPasswordEmail.
func (mr *MockEmailSenderServiceMockRecorder) SendResetPasswordEmail(to, name, resetCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordEmail", reflect.TypeOf((*MockEmailSenderService)(nil).SendResetPasswordEmail), to, name, resetCode)
}

// SendTransactionInfo mocks base method.
func (m *MockEmailSenderService) SendTransactionInfo(to, Transactions_id, Cart_id, User_id, Fullname_user, Trx_date, Payment, Payment_url, Amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransactionInfo", to, Transactions_id, Cart_id, User_id, Fullname_user, Trx_date, Payment, Payment_url, Amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransactionInfo indicates an expected call of SendTransactionInfo.
func (mr *MockEmailSenderServiceMockRecorder) SendTransactionInfo(to, Transactions_id, Cart_id, User_id, Fullname_user, Trx_date, Payment, Payment_url, Amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransactionInfo", reflect.TypeOf((*MockEmailSenderService)(nil).SendTransactionInfo), to, Transactions_id, Cart_id, User_id, Fullname_user, Trx_date, Payment, Payment_url, Amount)
}

// SendVerificationEmail mocks base method.
func (m *MockEmailSenderService) SendVerificationEmail(to, name, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", to, name, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockEmailSenderServiceMockRecorder) SendVerificationEmail(to, name, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockEmailSenderService)(nil).SendVerificationEmail), to, name, code)
}

// SendWelcomeEmail mocks base method.
func (m *MockEmailSenderService) SendWelcomeEmail(to, name, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWelcomeEmail", to, name, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWelcomeEmail indicates an expected call of SendWelcomeEmail.
func (mr *MockEmailSenderServiceMockRecorder) SendWelcomeEmail(to, name, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWelcomeEmail", reflect.TypeOf((*MockEmailSenderService)(nil).SendWelcomeEmail), to, name, message)
}
