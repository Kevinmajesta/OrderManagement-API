// Code generated by MockGen. DO NOT EDIT.
// Source: E:/TestCuaniaga/OrderManagement-API/internal/repository/user.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	entity "Kevinmajesta/OrderManagementAPI/internal/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockUserRepository) CheckUser(UserId uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", UserId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockUserRepositoryMockRecorder) CheckUser(UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUserRepository)(nil).CheckUser), UserId)
}

// CheckUserExists mocks base method.
func (m *MockUserRepository) CheckUserExists(id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockUserRepositoryMockRecorder) CheckUserExists(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExists), id)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(user *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), user)
}

// FindByRole mocks base method.
func (m *MockUserRepository) FindByRole(role string, users *[]entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRole", role, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByRole indicates an expected call of FindByRole.
func (mr *MockUserRepositoryMockRecorder) FindByRole(role, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRole", reflect.TypeOf((*MockUserRepository)(nil).FindByRole), role, users)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), email)
}

// FindUserByID mocks base method.
func (m *MockUserRepository) FindUserByID(id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryMockRecorder) FindUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByID), id)
}

// FindUserByResetCode mocks base method.
func (m *MockUserRepository) FindUserByResetCode(resetCode string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByResetCode", resetCode)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByResetCode indicates an expected call of FindUserByResetCode.
func (mr *MockUserRepositoryMockRecorder) FindUserByResetCode(resetCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByResetCode", reflect.TypeOf((*MockUserRepository)(nil).FindUserByResetCode), resetCode)
}

// FindUserByVerifCode mocks base method.
func (m *MockUserRepository) FindUserByVerifCode(verifCode string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByVerifCode", verifCode)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByVerifCode indicates an expected call of FindUserByVerifCode.
func (mr *MockUserRepositoryMockRecorder) FindUserByVerifCode(verifCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByVerifCode", reflect.TypeOf((*MockUserRepository)(nil).FindUserByVerifCode), verifCode)
}

// GetAllUserIds mocks base method.
func (m *MockUserRepository) GetAllUserIds() ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserIds")
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserIds indicates an expected call of GetAllUserIds.
func (mr *MockUserRepositoryMockRecorder) GetAllUserIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserIds", reflect.TypeOf((*MockUserRepository)(nil).GetAllUserIds))
}

// GetUserProfileByID mocks base method.
func (m *MockUserRepository) GetUserProfileByID(id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileByID indicates an expected call of GetUserProfileByID.
func (mr *MockUserRepositoryMockRecorder) GetUserProfileByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserProfileByID), id)
}

// SaveResetCode mocks base method.
func (m *MockUserRepository) SaveResetCode(userID uuid.UUID, resetCode string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResetCode", userID, resetCode, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResetCode indicates an expected call of SaveResetCode.
func (mr *MockUserRepositoryMockRecorder) SaveResetCode(userID, resetCode, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResetCode", reflect.TypeOf((*MockUserRepository)(nil).SaveResetCode), userID, resetCode, expiresAt)
}

// SaveVerifCode mocks base method.
func (m *MockUserRepository) SaveVerifCode(userID uuid.UUID, resetCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVerifCode", userID, resetCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVerifCode indicates an expected call of SaveVerifCode.
func (mr *MockUserRepositoryMockRecorder) SaveVerifCode(userID, resetCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVerifCode", reflect.TypeOf((*MockUserRepository)(nil).SaveVerifCode), userID, resetCode)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), user)
}

// UpdateUserJwtToken mocks base method.
func (m *MockUserRepository) UpdateUserJwtToken(userID uuid.UUID, token string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserJwtToken", userID, token, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserJwtToken indicates an expected call of UpdateUserJwtToken.
func (mr *MockUserRepositoryMockRecorder) UpdateUserJwtToken(userID, token, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserJwtToken", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserJwtToken), userID, token, expiresAt)
}
